{"version":3,"sources":["Components/src.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","className","onChange","handleChange","name","placeholder","value","firstName","lastName","age","type","checked","gender","destination","nutsFree","lactoseFree","isVegan","App","state","bind","e","target","this","setState","Component","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAyHeA,MAvHf,SAAuBC,GACrB,OACE,8BACE,2CACA,0BAAMC,UAAU,aACd,2BACEA,UAAU,OACVC,SAAUF,EAAMG,aAChBC,KAAK,YACLC,YAAY,aACZC,MAAON,EAAMO,YAEf,6BACA,2BACEN,UAAU,OACVC,SAAUF,EAAMG,aAChBC,KAAK,WACLC,YAAY,YACZC,MAAON,EAAMQ,WAEf,6BACA,2BACEP,UAAU,OACVC,SAAUF,EAAMG,aAChBC,KAAK,MACLC,YAAY,MACZC,MAAON,EAAMS,MAEf,6BACA,6BACA,+BACE,2BACER,UAAU,cACVS,KAAK,QACLN,KAAK,SACLE,MAAM,OACNK,QAA0B,SAAjBX,EAAMY,OACfV,SAAUF,EAAMG,eAPpB,QAWA,+BACE,6BACA,2BACEF,UAAU,cACVS,KAAK,QACLN,KAAK,SACLE,MAAM,SACNK,QAA0B,WAAjBX,EAAMY,OACfV,SAAUF,EAAMG,eARpB,UAYA,6BACA,2BAAOF,UAAU,sBAAjB,2BACA,6BACA,4BACEA,UAAU,oBACVC,SAAUF,EAAMG,aAChBC,KAAK,cACLE,MAAON,EAAMa,aAEb,4BAAQP,MAAM,IAAd,qCACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,WAEF,6BACA,6BACA,2BAAOL,UAAU,sBAAjB,yBACA,6BACA,yBAAKA,UAAU,gBACb,2BACES,KAAK,WACLN,KAAK,WACLF,SAAUF,EAAMG,aAChBQ,QAASX,EAAMc,WAEjB,2CACA,6BACA,2BACEJ,KAAK,WACLN,KAAK,cACLF,SAAUF,EAAMG,aAChBQ,QAASX,EAAMe,cAEjB,8CACA,6BACA,2BACEL,KAAK,WACLN,KAAK,UACLF,SAAUF,EAAMG,aAChBQ,QAASX,EAAMgB,UAEjB,wCAEF,4BAAQf,UAAU,UAAlB,WAEF,6BACA,yBAAKA,UAAU,gBACb,oDACA,yCACcD,EAAMO,UADpB,IACgCP,EAAMQ,UAEtC,wCAAcR,EAAMS,KACpB,2CAAiBT,EAAMY,QACvB,gDAAsBZ,EAAMa,aAC5B,0DACA,yBAAKZ,UAAU,gBACb,+CAAqBD,EAAMc,SAAW,OAAS,MADjD,IAC8D,6BAC5D,kDAAwBd,EAAMe,YAAc,OAAS,MAAa,IAClE,6BACA,gDAAsBf,EAAMgB,QAAU,OAAS,UClF1CC,E,YA5Bb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXX,UAAW,GACXC,SAAU,GACVC,IAAK,GACLG,OAAQ,GACRC,YAAa,GACbC,UAAU,EACVC,aAAa,EACbC,SAAS,GAEX,EAAKb,aAAe,EAAKA,aAAagB,KAAlB,gBAZR,E,0EAeDC,GAAI,IAAD,EACyBA,EAAEC,OAAjCf,EADM,EACNA,MAAOF,EADD,EACCA,KAAMM,EADP,EACOA,KAAMC,EADb,EACaA,QAElB,aAATD,EACIY,KAAKC,SAAL,eAAiBnB,EAAOO,IACxBW,KAAKC,SAAL,eAAiBnB,EAAOE,M,+BAI5B,OAAO,kBAAC,EAAD,eAAeH,aAAcmB,KAAKnB,cAAkBmB,KAAKJ,Y,GAzBlDM,a,MCSHP,MARf,WACE,OACE,yBAAKhB,UAAU,OACf,kBAAEwB,EAAF,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fe331180.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction FormComponent(props) {\r\n  return (\r\n    <main>\r\n      <h1>Simple form</h1>\r\n      <form className=\"inputForm\">\r\n        <input\r\n          className=\"text\"\r\n          onChange={props.handleChange}\r\n          name=\"firstName\"\r\n          placeholder=\"First Name\"\r\n          value={props.firstName}\r\n        />\r\n        <br />\r\n        <input\r\n          className=\"text\"\r\n          onChange={props.handleChange}\r\n          name=\"lastName\"\r\n          placeholder=\"Last Name\"\r\n          value={props.lastName}\r\n        />\r\n        <br />\r\n        <input\r\n          className=\"text\"\r\n          onChange={props.handleChange}\r\n          name=\"age\"\r\n          placeholder=\"Age\"\r\n          value={props.age}\r\n        />\r\n        <br />\r\n        <br />\r\n        <label>\r\n          <input\r\n            className=\"radiobutton\"\r\n            type=\"radio\"\r\n            name=\"gender\"\r\n            value=\"male\"\r\n            checked={props.gender === \"male\"}\r\n            onChange={props.handleChange}\r\n          />\r\n          Male\r\n        </label>\r\n        <label>\r\n          <br />\r\n          <input\r\n            className=\"radiobutton\"\r\n            type=\"radio\"\r\n            name=\"gender\"\r\n            value=\"female\"\r\n            checked={props.gender === \"female\"}\r\n            onChange={props.handleChange}\r\n          />\r\n          Female\r\n        </label>\r\n        <br />\r\n        <label className=\"destination-header\">Select your destination</label>\r\n        <br />\r\n        <select\r\n          className=\"destination-input\"\r\n          onChange={props.handleChange}\r\n          name=\"destination\"\r\n          value={props.destination}\r\n        >\r\n          <option value=\"\">-- Please Choose a destination --</option>\r\n          <option value=\"Thailand\">Thailand</option>\r\n          <option value=\"Japan\">Japan</option>\r\n          <option value=\"Brazil\">Brazil</option>\r\n        </select>\r\n        <br />\r\n        <br />\r\n        <label className=\"restrictions-title\">Dietary restrictions:</label>\r\n        <br />\r\n        <div className=\"restrictions\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"nutsFree\"\r\n            onChange={props.handleChange}\r\n            checked={props.nutsFree}\r\n          />\r\n          <span>Nuts free</span>\r\n          <br />\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"lactoseFree\"\r\n            onChange={props.handleChange}\r\n            checked={props.lactoseFree}\r\n          />\r\n          <span>Lactose free</span>\r\n          <br />\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"isVegan\"\r\n            onChange={props.handleChange}\r\n            checked={props.isVegan}\r\n          />\r\n          <span>Vegan</span>\r\n        </div>\r\n        <button className=\"submit\">Submit</button>\r\n      </form>\r\n      <hr />\r\n      <div className=\"entered-info\">\r\n        <h2>Entered information:</h2>\r\n        <p>\r\n          Your name: {props.firstName} {props.lastName}\r\n        </p>\r\n        <p>Your age: {props.age}</p>\r\n        <p>Your gender: {props.gender}</p>\r\n        <p>Your destination: {props.destination}</p>\r\n        <p>Your dietary restrictions: </p>\r\n        <div className=\"restrictions\">\r\n          <span>**Nuts free : {props.nutsFree ? \" Yes\" : \"No\"}</span> <br />\r\n          <span>**Lactose free : {props.lactoseFree ? \" Yes\" : \"No\"}</span>{\" \"}\r\n          <br />\r\n          <span>**Vegan meal : {props.isVegan ? \" Yes\" : \"No\"}</span>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default FormComponent;","import React, { Component } from \"react\";\r\nimport FormComponent from \"./src\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      age: \"\",\r\n      gender: \"\",\r\n      destination: \"\",\r\n      nutsFree: false,\r\n      lactoseFree: false,\r\n      isVegan: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { value, name, type, checked } = e.target;\r\n\r\n    type === \"checkbox\"\r\n      ? this.setState({ [name]: checked })\r\n      : this.setState({ [name]: value });\r\n  }\r\n\r\n  render() {\r\n    return <FormComponent handleChange={this.handleChange} {...this.state} />;\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport  FormComponent from './Components/Form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    < FormComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}